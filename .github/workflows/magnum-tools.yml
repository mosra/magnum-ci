name: Magnum Tools

on: [push, pull_request, workflow_dispatch]

env:
  BASIS_VERSION: v1_15_update2
  ASSIMP_VERSION: 5.2.5
  MESHOPTIMIZER_VERSION: 0.18
  SDL_VERSION: 2.0.20
  PYBIND_VERSION: 2.9.2
  ZLIB_VERSION: 1.2.13
  PNG_VERSION: 1.6.39
  JPEG_VERSION: 2.1.4
  OPENEXR_VERSION: 3.1.5
  WEBP_VERSION: 1.2.4

jobs:
  ubuntu:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04]
    steps:
    - name: Install Ninja
      uses: seanmiddleditch/gha-setup-ninja@v3
    - name: Clone Corrade
      uses: actions/checkout@v3
      with:
        repository: mosra/corrade
        path: corrade
        # Needed for tags :(
        fetch-depth: 0
    - name: Clone Magnum
      uses: actions/checkout@v3
      with:
        repository: mosra/magnum
        path: magnum
        # Needed for tags :(
        fetch-depth: 0
    - name: Clone Magnum Plugins
      uses: actions/checkout@v3
      with:
        repository: mosra/magnum-plugins
        path: magnum-plugins
        # Needed for tags :(
        fetch-depth: 0
    - name: Clone Magnum Extras
      uses: actions/checkout@v3
      with:
        repository: mosra/magnum-extras
        path: magnum-extras
        # Needed for tags :(
        fetch-depth: 0
    - name: Clone Magnum Bindings
      uses: actions/checkout@v3
      with:
        repository: mosra/magnum-bindings
        path: magnum-bindings
        # Needed for tags :(
        fetch-depth: 0
    - name: Install OpenGL and Vulkan, other tools
      run: |
        sudo apt install -y libgl1-mesa-dev libvulkan-dev wget unzip chrpath
        mkdir -p deps
    - name: Fetch Pybind11
      run: |
        wget --no-clobber https://github.com/pybind/pybind11/archive/v${{ env.PYBIND_VERSION }}.tar.gz
        tar -xzf v${{ env.PYBIND_VERSION }}.tar.gz
    - name: Fetch prebuilt SDL
      run: |
        cd deps
        wget https://ci.magnum.graphics/sdl-${{ env.SDL_VERSION }}-${{ matrix.os }}.zip
        unzip sdl-${{ env.SDL_VERSION }}-${{ matrix.os }}.zip
    - name: Fetch prebuilt meshoptimizer
      run: |
        cd deps
        wget https://ci.magnum.graphics/meshoptimizer-${{ env.MESHOPTIMIZER_VERSION }}-${{ matrix.os }}.zip
        unzip meshoptimizer-${{ env.MESHOPTIMIZER_VERSION }}-${{ matrix.os }}.zip
    - name: Fetch prebuilt Assimp
      run: |
        cd deps
        wget https://ci.magnum.graphics/assimp-${{ env.ASSIMP_VERSION }}-${{ matrix.os }}.zip
        unzip assimp-${{ env.ASSIMP_VERSION }}-${{ matrix.os }}.zip
    - name: Fetch prebuilt zlib
      run: |
        cd deps
        wget https://ci.magnum.graphics/zlib-${{ env.ZLIB_VERSION }}-${{ matrix.os }}.zip
        unzip zlib-${{ env.ZLIB_VERSION }}-${{ matrix.os }}.zip
    - name: Fetch prebuilt libpng
      run: |
        cd deps
        wget https://ci.magnum.graphics/libpng-${{ env.PNG_VERSION }}-${{ matrix.os }}.zip
        unzip libpng-${{ env.PNG_VERSION }}-${{ matrix.os }}.zip
    - name: Fetch prebuilt libjpeg-turbo
      run: |
        cd deps
        wget https://ci.magnum.graphics/libjpeg-turbo-${{ env.JPEG_VERSION }}-${{ matrix.os }}.zip
        unzip libjpeg-turbo-${{ env.JPEG_VERSION }}-${{ matrix.os }}.zip
    - name: Fetch prebuilt openexr
      run: |
        cd deps
        wget https://ci.magnum.graphics/openexr-${{ env.OPENEXR_VERSION }}-${{ matrix.os }}.zip
        unzip openexr-${{ env.OPENEXR_VERSION }}-${{ matrix.os }}.zip
    - name: Fetch prebuilt libwebp
      run: |
        cd deps
        wget https://ci.magnum.graphics/libwebp-${{ env.WEBP_VERSION }}-${{ matrix.os }}.zip
        unzip libwebp-${{ env.WEBP_VERSION }}-${{ matrix.os }}.zip
    - name: Fetch Basis Universal sources
      run: |
        mkdir basis-universal && cd basis-universal
        wget https://github.com/BinomialLLC/basis_universal/archive/${{ env.BASIS_VERSION }}.tar.gz
        tar --strip-components 1 -xzf ${{ env.BASIS_VERSION }}.tar.gz
    - name: Build & install Corrade
      run: |
        cmake \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=$(pwd)/install \
          `# https://cmake.org/cmake/help/latest/policy/CMP0095.html` \
          -DCMAKE_INSTALL_RPATH="\\\${ORIGIN}/../lib" \
          -DCORRADE_BUILD_DEPRECATED=OFF \
          -DCORRADE_WITH_TESTSUITE=OFF \
          -DCORRADE_WITH_INTERCONNECT=ON \
          -G Ninja -S corrade -B corrade-build
        ninja -C corrade-build install/strip
    - name: Build & install Magnum
      run: |
        cmake \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=$(pwd)/install \
          -DCMAKE_PREFIX_PATH=$(pwd)/deps \
          `# https://cmake.org/cmake/help/latest/policy/CMP0095.html` \
          -DCMAKE_INSTALL_RPATH="\\\${ORIGIN}/../lib" \
          -DMAGNUM_BUILD_DEPRECATED=OFF \
          -DMAGNUM_WITH_AUDIO=OFF \
          -DMAGNUM_WITH_GL=ON \
          -DMAGNUM_WITH_DEBUGTOOLS=ON \
          -DMAGNUM_WITH_MESHTOOLS=ON \
          -DMAGNUM_WITH_PRIMITIVES=ON \
          -DMAGNUM_WITH_SCENEGRAPH=ON \
          -DMAGNUM_WITH_SCENETOOLS=ON \
          -DMAGNUM_WITH_SHADERS=ON \
          -DMAGNUM_WITH_SHADERTOOLS=ON \
          -DMAGNUM_WITH_TEXT=ON \
          -DMAGNUM_WITH_TEXTURETOOLS=ON \
          -DMAGNUM_WITH_TRADE=ON \
          -DMAGNUM_WITH_VK=ON \
          -DMAGNUM_WITH_SDL2APPLICATION=ON \
          -DMAGNUM_WITH_GL_INFO=ON \
          -DMAGNUM_WITH_VK_INFO=ON \
          -DMAGNUM_WITH_IMAGECONVERTER=ON \
          -DMAGNUM_WITH_SCENECONVERTER=ON \
          -DMAGNUM_WITH_SHADERCONVERTER=ON \
          -DMAGNUM_WITH_ANYIMAGECONVERTER=ON \
          -DMAGNUM_WITH_ANYIMAGEIMPORTER=ON \
          -DMAGNUM_WITH_ANYSCENECONVERTER=ON \
          -DMAGNUM_WITH_ANYSCENEIMPORTER=ON \
          -DMAGNUM_WITH_ANYSHADERCONVERTER=ON \
          -DMAGNUM_WITH_OBJIMPORTER=OFF \
          -DMAGNUM_WITH_TGAIMAGECONVERTER=ON \
          -DMAGNUM_WITH_TGAIMPORTER=ON \
          -G Ninja -S magnum -B magnum-build
        ninja -C magnum-build install/strip
    - name: Build & install Magnum Plugins
      run: |
        cmake \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=$(pwd)/install \
          -DCMAKE_PREFIX_PATH=$(pwd)/deps \
          `# https://cmake.org/cmake/help/latest/policy/CMP0095.html` \
          `# plugins also need to look up to lib/ from lib/magnum/<interface>/` \
          -DCMAKE_INSTALL_RPATH="\\\${ORIGIN}/../lib;\\\${ORIGIN}/../.." \
          -DBASIS_UNIVERSAL_DIR=$(pwd)/basis-universal \
          -DMAGNUM_WITH_ASSIMPIMPORTER=ON \
          -DMAGNUM_WITH_ASTCIMPORTER=ON \
          -DMAGNUM_WITH_BASISIMAGECONVERTER=ON \
          -DMAGNUM_WITH_BASISIMPORTER=ON \
          -DMAGNUM_WITH_DDSIMPORTER=ON \
          -DMAGNUM_WITH_DEVILIMAGEIMPORTER=OFF \
          -DMAGNUM_WITH_GLSLANGSHADERCONVERTER=OFF \
          -DMAGNUM_WITH_GLTFIMPORTER=ON \
          -DMAGNUM_WITH_GLTFSCENECONVERTER=ON \
          -DMAGNUM_WITH_ICOIMPORTER=ON \
          -DMAGNUM_WITH_JPEGIMAGECONVERTER=ON \
          -DMAGNUM_WITH_JPEGIMPORTER=ON \
          -DMAGNUM_WITH_KTXIMAGECONVERTER=ON \
          -DMAGNUM_WITH_KTXIMPORTER=ON \
          -DMAGNUM_WITH_MESHOPTIMIZERSCENECONVERTER=ON \
          -DMAGNUM_WITH_MINIEXRIMAGECONVERTER=ON \
          -DMAGNUM_WITH_OPENEXRIMAGECONVERTER=ON \
          -DMAGNUM_WITH_OPENEXRIMPORTER=ON \
          -DMAGNUM_WITH_PNGIMAGECONVERTER=ON \
          -DMAGNUM_WITH_PNGIMPORTER=ON \
          -DMAGNUM_WITH_PRIMITIVEIMPORTER=ON \
          -DMAGNUM_WITH_SPIRVTOOLSSHADERCONVERTER=OFF \
          -DMAGNUM_WITH_STANFORDIMPORTER=ON \
          -DMAGNUM_WITH_STANFORDSCENECONVERTER=ON \
          -DMAGNUM_WITH_STBDXTIMAGECONVERTER=ON \
          -DMAGNUM_WITH_STBIMAGECONVERTER=ON \
          -DMAGNUM_WITH_STBIMAGEIMPORTER=ON \
          -DMAGNUM_WITH_STBRESIZEIMAGECONVERTER=ON \
          -DMAGNUM_WITH_STBTRUETYPEFONT=ON \
          -DMAGNUM_WITH_STLIMPORTER=ON \
          -DMAGNUM_WITH_UFBXIMPORTER=ON \
          -DMAGNUM_WITH_WEBPIMPORTER=ON \
          -G Ninja -S magnum-plugins -B magnum-plugins-build
        ninja -C magnum-plugins-build install/strip
        # Copy also the useful gltf<->glb Python scripts
        install magnum-plugins/src/MagnumPlugins/GltfImporter/Test/glb2gltf.py $(pwd)/install/bin
        install magnum-plugins/src/MagnumPlugins/GltfImporter/Test/gltf2glb.py $(pwd)/install/bin
    - name: Build & install Magnum Extras
      run: |
        cmake \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=$(pwd)/install \
          -DCMAKE_PREFIX_PATH=$(pwd)/deps \
          `# https://cmake.org/cmake/help/latest/policy/CMP0095.html` \
          -DCMAKE_INSTALL_RPATH="\\\${ORIGIN}/../lib" \
          -DMAGNUM_WITH_PLAYER=ON \
          -G Ninja -S magnum-extras -B magnum-extras-build
        ninja -C magnum-extras-build install/strip
    - name: Setup Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    - name: Install Pybind11 for Python 3.10
      run: |
        cmake \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=$(pwd)/deps-10 \
          -DPYBIND11_PYTHON_VERSION=3.10 \
          -DPYBIND11_TEST=OFF \
          -G Ninja -S pybind11-${{ env.PYBIND_VERSION }} -B pybind-build-10
        ninja -C pybind-build-10 install/strip
    - name: Build & install Magnum Bindings for Python 3.10
      run: |
        cmake \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=$(pwd)/install \
          -DCMAKE_PREFIX_PATH="$(pwd)/deps;$(pwd)/deps-10" \
          `# https://cmake.org/cmake/help/latest/policy/CMP0095.html` \
          `# no install here (setuptools does), so no CMAKE_INSTALL_RPATH,` \
          `# which also means we don't need to over-escape anything` \
          -DCMAKE_BUILD_RPATH="\${ORIGIN}/../lib" \
          -DPYBIND11_PYTHON_VERSION=3.10 \
          -DMAGNUM_WITH_PYTHON=ON \
          -G Ninja -S magnum-bindings -B magnum-bindings-build-10
        # We install just the version header here, the rest is done by setup.py
        ninja -C magnum-bindings-build-10 install/strip
        cd magnum-bindings-build-10/src/python
        python3.10 setup.py install --install-lib=python --root="$(pwd)/../../../install"
    - name: Setup Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'
    - name: Install Pybind11 for Python 3.9
      run: |
        cmake \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=$(pwd)/deps-9 \
          -DPYBIND11_PYTHON_VERSION=3.9 \
          -DPYBIND11_TEST=OFF \
          -G Ninja -S pybind11-${{ env.PYBIND_VERSION }} -B pybind-build-9
        ninja -C pybind-build-9 install/strip
    - name: Build & install Magnum Bindings for Python 3.9
      run: |
        cmake \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=$(pwd)/install \
          -DCMAKE_PREFIX_PATH="$(pwd)/deps;$(pwd)/deps-9" \
          `# https://cmake.org/cmake/help/latest/policy/CMP0095.html` \
          `# no install here (setuptools does), so no CMAKE_INSTALL_RPATH,` \
          `# which also means we don't need to over-escape anything` \
          -DCMAKE_BUILD_RPATH="\${ORIGIN}/../lib" \
          -DPYBIND11_PYTHON_VERSION=3.9 \
          -DMAGNUM_WITH_PYTHON=ON \
          -G Ninja -S magnum-bindings -B magnum-bindings-build-9
        # We install just the version header here, the rest is done by setup.py
        ninja -C magnum-bindings-build-9 install/strip
        cd magnum-bindings-build-9/src/python
        python3.9 setup.py install --install-lib=python --root="$(pwd)/../../../install"
    # - name: Setup Python 3.8
    #   uses: actions/setup-python@v3
    #   with:
    #     python-version: '3.8'
    # - name: Install Pybind11 for Python 3.8
    #   run: |
    #     cmake \
    #       -DCMAKE_BUILD_TYPE=Release \
    #       -DCMAKE_INSTALL_PREFIX=$(pwd)/deps-8 \
    #       -DPYBIND11_PYTHON_VERSION=3.8 \
    #       -DPYBIND11_TEST=OFF \
    #       -G Ninja -S pybind11-${{ env.PYBIND_VERSION }} -B pybind-build-8
    #     ninja -C pybind-build-8 install/strip
    # - name: Build & install Magnum Bindings for Python 3.8
    #   run: |
    #     cmake \
    #       -DCMAKE_BUILD_TYPE=Release \
    #       -DCMAKE_INSTALL_PREFIX=$(pwd)/install \
    #       -DCMAKE_PREFIX_PATH="$(pwd)/deps;$(pwd)/deps-8" \
    #       `# https://cmake.org/cmake/help/latest/policy/CMP0095.html` \
    #       `# no install here (setuptools does), so no CMAKE_INSTALL_RPATH,` \
    #       `# which also means we don't need to over-escape anything` \
    #       -DCMAKE_BUILD_RPATH="\${ORIGIN}/../lib" \
    #       -DPYBIND11_PYTHON_VERSION=3.8 \
    #       -DMAGNUM_WITH_PYTHON=ON \
    #       -G Ninja -S magnum-bindings -B magnum-bindings-build-8
    #     # We install just the version header here, the rest is done by setup.py
    #     ninja -C magnum-bindings-build-8 install/strip
    #     cd magnum-bindings-build-8/src/python
    #     python3.8 setup.py install --install-lib=python --root="$(pwd)/../../../install"
    - name: Patch RPATH in nested Magnum Bindings modules
      run: |
        # https://stackoverflow.com/a/20333550
        # Not using patchelf as the expectation is that CMAKE_BUILD_RPATH
        # above worked and used '$ORIGIN/../lib' for root _corrade and _magnum
        # *.so files.
        # TODO CMake implicitly puts the build tree into the RPATH for _corrade
        # and _magnum, any way to remove that without patching with chrpath?
        # CMAKE_SKIP_BUILD_RPATH together with CMAKE_BUILD_RPATH doesn't work
        # as that skips even the explicit one.
        chrpath -r '$ORIGIN/../../lib' install/python/corrade/*.so
        chrpath -r '$ORIGIN/../../lib' install/python/magnum/*.so
        chrpath -r '$ORIGIN/../../../lib' install/python/magnum/platform/*.so
    - name: Remove includes, CMake modules, static libraries, corrade-rc, Python Egg Info
      run: |
        # Keep version info tho
        mv install/include/Corrade/version.h install/versionCorrade.h
        mv install/include/Magnum/version.h install/
        mv install/include/Magnum/versionPlugins.h install/
        mv install/include/Magnum/versionExtras.h install/
        mv install/include/Magnum/versionBindings.h install/
        rm -r install/include
        mkdir -p install/include/Corrade
        mv install/versionCorrade.h install/include/Corrade/version.h
        mkdir -p install/include/Magnum
        mv install/version*.h install/include/Magnum/
        rm -r install/share
        # *.so symlinks are not needed either
        rm -r install/lib/lib*.so
        # everything is linked against .2 but the actual content is in .2.4,
        # drop the symlink
        for i in $(ls install/lib/lib*.so.2); do
          rm $i
          mv $i.4 $i
        done
        rm -r install/lib/*.a
        rm install/bin/corrade-rc
        # TODO can this be just not made at all?
        rm -r install/python/*.egg-info
    - name: Collect version info
      # the tag name is included only for Corrade, then the others have just N
      # and a short hash (4 instead of 8 numbers, or at least as much to have
      # the hash unique)
      run: |
        cd corrade
        VERSION=$(git describe --match "v*" --abbrev=4)
        echo "CORRADE_VERSION=$VERSION" >> $GITHUB_ENV
        cd ../magnum
        VERSION=$(git describe --match "v*" --abbrev=4)
        echo "MAGNUM_VERSION=${VERSION:9}" >> $GITHUB_ENV
        cd ../magnum-plugins
        VERSION=$(git describe --match "v*" --abbrev=4)
        echo "MAGNUM_PLUGINS_VERSION=${VERSION:9}" >> $GITHUB_ENV
        cd ../magnum-extras
        VERSION=$(git describe --match "v*" --abbrev=4)
        echo "MAGNUM_EXTRAS_VERSION=${VERSION:9}" >> $GITHUB_ENV
        cd ../magnum-bindings
        VERSION=$(git describe --match "v*" --abbrev=4)
        echo "MAGNUM_BINDINGS_VERSION=${VERSION:9}" >> $GITHUB_ENV
    - name: Compress files because GitHub Actions artifact upload is beyond stupid
      # https://github.com/actions/upload-artifact#maintaining-file-permissions-and-case-sensitive-files
      # like, seriously, file permissions lost?! and one HTTP request *per one
      # fucking file*?!
      run: |
        mv install magnum-tools-${{ env.CORRADE_VERSION }}-${{ env.MAGNUM_VERSION }}-${{ env.MAGNUM_PLUGINS_VERSION }}-${{ env.MAGNUM_EXTRAS_VERSION }}-${{ env.MAGNUM_BINDINGS_VERSION }}-linux-x64
        tar -cf magnum-tools-${{ env.CORRADE_VERSION }}-${{ env.MAGNUM_VERSION }}-${{ env.MAGNUM_PLUGINS_VERSION }}-${{ env.MAGNUM_EXTRAS_VERSION }}-${{ env.MAGNUM_BINDINGS_VERSION }}-linux-x64.tar magnum-tools-${{ env.CORRADE_VERSION }}-${{ env.MAGNUM_VERSION }}-${{ env.MAGNUM_PLUGINS_VERSION }}-${{ env.MAGNUM_EXTRAS_VERSION }}-${{ env.MAGNUM_BINDINGS_VERSION }}-linux-x64
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: magnum-tools-${{ env.CORRADE_VERSION }}-${{ env.MAGNUM_VERSION }}-${{ env.MAGNUM_PLUGINS_VERSION }}-${{ env.MAGNUM_EXTRAS_VERSION }}-${{ env.MAGNUM_BINDINGS_VERSION }}-linux-x64
        path: magnum-tools-${{ env.CORRADE_VERSION }}-${{ env.MAGNUM_VERSION }}-${{ env.MAGNUM_PLUGINS_VERSION }}-${{ env.MAGNUM_EXTRAS_VERSION }}-${{ env.MAGNUM_BINDINGS_VERSION }}-linux-x64.tar
